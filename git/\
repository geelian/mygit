# 起步 
## 运行Git前的配置 
1. /etc/gitconfig 每一个用户以及他们仓库的通用配置变量，  git config --system 会读 
2. ~/.gitconfig ~/.connfig/git/config 当前用户   git --global  读
3. .git/config 当前仓库中的config文件
没有一级覆盖上级

git config --list 列出      
git config user.name 某一项     

## 用户信息 
git config --global user.name "lg"   
git config --global user.email lg@qq.com    

// 写在 .gitconfig 中

## 文本编辑器 
默认vim 
git config --global core.editor emacs   


## 帮助 
git help <verb>     
git <verb> --help      
man git-<verb>  

git help cofig  

irc.freenode.net   :好像被墙了  

# git基础 

## 获取Git

1. 现有目录初始化 git init 
2. 克隆仓库 git clone  https://github.com/libgit2/libgit2   

## 更新到仓库
文件状态    
Untracked(无足迹的  -- Add the file --》 staged (已暂存 -- Commit --》 Unmodified (未更变 --Remove the file --》Untracked 

Unmodified-- Edit the file --> Modified(修改 ---stage the file ---> Staged      

### 检查当前文件状态

git 只是暂存运行git add命令时的版本     
git status 
```
On branch master 在主分支
Your branch is up-to-date with 'mygit/master'. 你的分支是最新的和mygit/master

nothing to commit, working directory clean 没有什么要提交的，工作区是干净的 
新建一个文件以后 
```
On branch master 在主分支
Your branch is up-to-date with 'mygit/master'.  你的分支和mygit/master一样

Untracked files: 没有跟踪的文件
  (use "git add <file>..." to include in what will be committed) 使用git add <file>...  使用git add <file>... 下面包含的将被提交

	README  README文件

nothing added to commit but untracked files present (use "git add" to track) 没有添加到提交，但是在跟踪的文件 
```
跟踪新文件 
git add README
```
Changes to be committed: 提交修改
  (use "git reset HEAD <file>..." to unstage)  使用git reset HEAD <file>... 到没有跟踪状态

	new file:   README  新文件 
```
暂存已修改文件

```
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

	new file:   README

Changes not staged for commit:  更改没有放在缓存区
  (use "git add <file>..." to update what will be committed)  使用  "git add <file>..." 将更新文件将被提交
  (use "git checkout -- <file>..." to discard changes in working directory)  使用“git checkout --<file>....”  将放弃在工作区的修改

	modified:   README      被更改的 
```


$ git status --short //-s
```
 M README // 修改不在暂存区
MM Rakefile // 暂存区有,不在暂存 
A lib/git.rb // 新加到暂存区
M lib/simplegit.rb //修改过的文件在暂存区
?? LICENSE.txt // 没有跟踪的文件
```

## 忽略文件
在文件目录下建立 .gitinore  *.swp// vim的临时文件将被忽略   
\\# 注解 
glob匹配模式
\\! 取反    
target/ 忽略目录下的所有    
参考https://github.com/github/gitignore 



